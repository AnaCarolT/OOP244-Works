/*///////////////////////////////////////////////////////////////////////////
Full name: Ana Caroline Campos Tirolli
Student ID#:122476229
Email: acampos-tirolli@myseneca.ca
Date: 2023-07-31
///////////////////////////////////////////////////////////////////////////*/

This workshop got me a little confused, I don't know if it was because English is not my first language or I was just genuinely not understanding it. First when you get the files there is already a base in it, the file.h already had some prototypes and the text.cpp had the int getFileLength()const implemented which gets the length of the whole file, the name is basically self explanatory. Then it explains what the variables do, when it says mandatory functionalities kept me wondering a bit, like do I need to do a constructor with no arguments? should i just set everything in a safe mode in the constructor I already have? I decided to keep going so I was not sure. Then when It comes to the operator[], it says: "The behaviour of the operator is not defined if the index goes out of bounds." that means I should do something about it? or not? do I need to make it flip to the beginning when necessary? I took that as It will have a weird behaviour if don't do some kind of validation, then I put the standard procedure for the operator[] since I was not 100% sure what I was supposed to do. Then It says to add the rule of three, I added the destructor, copy constructor and the copy assignment, then the instructions started explaining things more explicitly, the function provided, the void read that tells us to use the function provided and write that will have a validation the how it should be printing. I guess maybe I was just overcomplicating things in my head. HtmlText.h also had a base but since it was very well explained, I could handle it faster. I could understand how to work with derived classes and resources, I also got the opportunity to work with fstream again which I always struggle although fstream is quite and easier than what we learned in IPC, I put a verifier in my code just in case because most of the issues in my code involved read and writing files. After I managed the right prototypes in the right reader files between parent and child, I could implement the code slowing and debugging when necessary.